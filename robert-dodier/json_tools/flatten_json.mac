/* flatten_json.mac -- flatten blob("foo" = blob("bar" = 123)) to foo.bar = 123
 *
 * copyright 2020 by Robert Dodier
 * I release this work under terms of the GNU GPL.
 */

flatten_json (prefix_tags, e) :=
  if listp(e)
    then flatten_json_list (prefix_tags, e)
  elseif equationp(e)
    then flatten_json_equation (prefix_tags, e)
  elseif blobp(e)
    then flatten_json_blob (prefix_tags, e)
  else
    apply (".", prefix_tags) = e;

flatten_json_list (prefix_tags, l) :=
  if some (blobp, l)
    then flatten_json_list_of_blobs (prefix_tags, l)
    else flatten_json_list_of_nonblobs (prefix_tags, l);

flatten_json_list_of_blobs (prefix_tags, l) :=
  block ([leading_tags: rest (prefix_tags, -1),
          trailing_tag: last (prefix_tags),
          revised_tags,
          kk: gensym ()],
         revised_tags: endcons (trailing_tag(kk), leading_tags),
         makelist (flatten_json (subst (kk = k, revised_tags), l[k]), k, 1, length(l)));

/* assume that l is a list of numbers;
 * might want to verify that and handle other cases
 */
flatten_json_list_of_nonblobs (prefix_tags, l) :=
  block ([nrows, ncols],
         [nrows, ncols]: if listp(l[1])
                           then [length(l), length(l[1])]
                           else [1, length(l)],
         apply (".", prefix_tags) = transpose (reshape (flatten (l), ncols, nrows)));

equationp (e) := not atom(e) and op(e) = "=";

flatten_json_equation (prefix_tags, e) := flatten_json (endcons (parse_string (lhs(e)), prefix_tags), rhs(e));

blobp (e) := not atom(e) and op(e) = 'blob;

flatten_json_blob (prefix_tags, b) := maplist (lambda ([e], flatten_json (prefix_tags, e)), b);
