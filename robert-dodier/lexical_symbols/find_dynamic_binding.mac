load ("lexical_symbols.lisp");

slurp_exprs (f) :=
  block ([s: openr(f), l: [], l1],
         while (l1: ?mread(s)) # false do push(l1, l),
         close (s),
         reverse (l));

facexp_exprs: map (second, slurp_exprs (file_search ("facexp.mac")));
genut_exprs: map (second, slurp_exprs (file_search ("genut.mac")));
all_exprs: append (facexp_exprs, genut_exprs);

all_functions: sublist (all_exprs, lambda ([e], not atom(e) and op(e) = ":="));

listofvars_try_harder (expr) :=
  unique (flatten (map (lambda ([e], if not atom(e) then [op(e), listofvars (args(e))] else e), listofvars (expr))));

listofvars_global ([e]) := sublist (listofvars_try_harder (e), lambda ([x], ?symbol\-package(x) # false));
listofvars_lexical ([e]) := sublist (listofvars_try_harder (e), lambda ([x], ?symbol\-package(x) = false));
get_global_name (x) := if ?symbol\-package(x) = false then ?get (x, ?reversealias);

defstruct (finfo (op, lexicals, globals));

make_finfo (e) := finfo (op(lhs(e)), map (get_global_name, listofvars_lexical(lhs(e), rhs(e))), listofvars_global(rhs(e)));
all_finfo: map (make_finfo, all_functions);

defstruct (callinfo (callee, globalvar, callers));

find_possible_callers (i) :=
  map (lambda ([x], callinfo (i@op, x, map (lambda ([y], y@op), find_possible_callers1 (x)))), i@globals);

find_possible_callers1 (x) := sublist (all_finfo, lambda ([e], member (x, e@lexicals)));

all_possible_callers1: map (find_possible_callers, all_finfo);
all_possible_callers2: map (lambda ([l], delete (false, l)), all_possible_callers1);
all_possible_callers3: sublist (all_possible_callers2, lambda ([l], l # []));
all_possible_callers4: flatten (all_possible_callers3);
all_possible_callers: sublist (all_possible_callers4, lambda ([x], x@callers # []));
no_callers: sublist (all_possible_callers4, lambda ([x], x@callers = []));

linel:200;
for x in all_possible_callers
  do (print (x), print (""));

maybe_needs_special_declaration: unique (map (lambda ([x], x@globalvar), all_possible_callers));

global_with_no_refs: map (lambda ([x], [x@callee, x@globalvar]), no_callers);
