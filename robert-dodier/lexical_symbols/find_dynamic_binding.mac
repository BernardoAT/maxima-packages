load ("lexical_symbols.lisp");

slurp_exprs (f) :=
  block ([s: openr(f), l: [], l1],
         while (l1: ?mread(s)) # false do push(l1, l),
         close (s),
         reverse (l));

listofvars_explode_mapatoms (expr) :=
  unique (flatten (listofvars_explode_mapatoms1 (expr)));

listofvars_explode_mapatoms1 (e) :=
  if e = [] then []
    elseif atom(e) then e
    else [listofvars_explode_mapatoms1 (listofvars (op(e))), map (listofvars_explode_mapatoms1, listofvars (args(e)))];

listofvars_global ([e]) := sublist (listofvars_explode_mapatoms (e), lambda ([x], ?symbol\-package(x) # false));
listofvars_lexical ([e]) := sublist (listofvars_explode_mapatoms (e), lambda ([x], ?symbol\-package(x) = false));
get_global_name (x) := if ?symbol\-package(x) = false then ?get (x, ?reversealias);

defstruct (finfo (op, lexicals, globals));

make_finfo (e) := finfo (op(lhs(e)), map (get_global_name, listofvars_lexical(lhs(e), rhs(e))), listofvars_global(rhs(e)));

defstruct (callinfo (callee, globalvar, callers));

find_possible_callers (i) :=
  map (lambda ([x], callinfo (i@op, x, map (lambda ([y], y@op), find_possible_callers1 (x)))), i@globals);

find_possible_callers1 (x) := sublist (all_finfo, lambda ([e], member (x, e@lexicals)));

find_possible_dynamic_binding ([filenames]) :=
 (exprs_lists: map (lambda ([f], map (second, slurp_exprs (file_search (f)))), filenames),
  all_exprs: apply (append, exprs_lists),
  all_functions: sublist (all_exprs, lambda ([e], not atom(e) and op(e) = ":=")),
  all_finfo: map (make_finfo, all_functions),
  
  map (find_possible_callers, all_finfo),
  map (lambda ([l], delete (false, l)), %%),
  sublist (%%, lambda ([l], l # [])),
  flatten (%%),
  all_possible_callers: sublist (%%, lambda ([x], x@callers # [])),

  unique (map (lambda ([x], x@globalvar), all_possible_callers)));

/*
linel:200;
for x in all_possible_callers
  do (print (x), print (""));
 */

/*
global_with_no_refs: map (lambda ([x], [x@callee, x@globalvar]), no_callers);
 */

